/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.2).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ErrorResponse;
import io.swagger.model.TodoBase;
import io.swagger.model.TodoFull;
import io.swagger.model.TodoList;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-03-14T08:55:59.545Z")

@Api(value = "todos", description = "the todos API")
public interface TodosApi {

    @ApiOperation(value = "Create Todo", nickname = "createTodo", notes = "Create a new todo.", response = TodoFull.class, tags={ "Todos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Todo created.", response = TodoFull.class),
        @ApiResponse(code = 400, message = "Invalid new todo.", response = ErrorResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/todos",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TodoFull> createTodo(@ApiParam(value = "The new todo."  )  @Valid @RequestBody TodoBase body);


    @ApiOperation(value = "Delete Todo", nickname = "deleteTodo", notes = "Delete an existing todo.", tags={ "Todos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Todo deleted."),
        @ApiResponse(code = 404, message = "Todo not found.") })
    @RequestMapping(value = "/todos/{todo-id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTodo(@ApiParam(value = "The todo identifier.",required=true) @PathVariable("todo-id") Integer todoId);


    @ApiOperation(value = "Get Todo", nickname = "getTodo", notes = "Request an existing todo.", response = TodoFull.class, tags={ "Todos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Todo found.", response = TodoFull.class),
        @ApiResponse(code = 404, message = "Todo not found.") })
    @RequestMapping(value = "/todos/{todo-id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<TodoFull> getTodo(@ApiParam(value = "The todo identifier.",required=true) @PathVariable("todo-id") Integer todoId);


    @ApiOperation(value = "List todos", nickname = "getTodos", notes = "Get a list of todos.", response = TodoList.class, responseContainer = "List", tags={ "Todos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of todos.", response = TodoList.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "Empty list of todos"),
        @ApiResponse(code = 206, message = "Partial list of todos.", response = TodoList.class),
        @ApiResponse(code = 400, message = "Invalid query params", response = ErrorResponse.class, responseContainer = "List") })
    @RequestMapping(value = "/todos",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<TodoList>> getTodos(@ApiParam(value = "Filters all or unfinished todos in the response", allowableValues = "all, unfinished", defaultValue = "unfinished") @Valid @RequestParam(value = "state", required = false, defaultValue="unfinished") String state,@Min(0) @Max(10) @ApiParam(value = "Maximal number of todos in the response", defaultValue = "5") @Valid @RequestParam(value = "limit", required = false, defaultValue="5") Integer limit,@Min(0) @Max(100) @ApiParam(value = "Offset for the todos in the response") @Valid @RequestParam(value = "offset", required = false) Integer offset);


    @ApiOperation(value = "Update Todo", nickname = "updateTodo", notes = "Update an existing todo.", tags={ "Todos", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Todo updated."),
        @ApiResponse(code = 400, message = "Invalid modified todo.", response = ErrorResponse.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Todo not found.") })
    @RequestMapping(value = "/todos/{todo-id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateTodo(@ApiParam(value = "The todo identifier.",required=true) @PathVariable("todo-id") Integer todoId,@ApiParam(value = "The modified todo."  )  @Valid @RequestBody TodoBase body);

}
